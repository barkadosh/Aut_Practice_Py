{"name": "TC 01 - Create assignment", "status": "broken", "statusDetails": {"message": "FileNotFoundError: [Errno 2] No such file or directory: './screen-shots/screen.png'", "trace": "self = <test_todo_app_allure.TestToDoActionsApp object at 0x00000263748DF250>\n\n    @allure.title(\"TC 01 - Create assignment\")\n    @allure.description(\"Creating a new assignment\")\n    def test_tc01(self):\n        try:\n            self.step_add_assignment()\n>           take_screenshot(driver)\n\ntest_todo_app_allure.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"01392dd76664e1f13a48a9d0a7878819\")>\n\n    def take_screenshot(driver):\n        image = \"./screen-shots/screen.png\"\n        driver.get_screenshot_as_file(image)\n>       allure.attach.file(image, attachment_type=allure.attachment_type.PNG)\n\nTakeScreenShot.py:7: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <allure_commons._allure.Attach object at 0x00000263747F3890>, source = './screen-shots/screen.png', name = None, attachment_type = <AttachmentType.PNG: ('image/png', 'png')>, extension = None\n\n    def file(self, source, name=None, attachment_type=None, extension=None):\n>       plugin_manager.hook.attach_file(source=source, name=name, attachment_type=attachment_type, extension=extension)\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\allure_commons\\_allure.py:203: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <_HookCaller 'attach_file'>, args = (), kwargs = {'attachment_type': <AttachmentType.PNG: ('image/png', 'png')>, 'extension': None, 'name': None, 'source': './screen-shots/screen.png'}, argname = 'extension'\nfirstresult = False\n\n    def __call__(self, *args, **kwargs):\n        if args:\n            raise TypeError(\"hook calling supports only keyword arguments\")\n        assert not self.is_historic()\n    \n        # This is written to avoid expensive operations when not needed.\n        if self.spec:\n            for argname in self.spec.argnames:\n                if argname not in kwargs:\n                    notincall = tuple(set(self.spec.argnames) - kwargs.keys())\n                    warnings.warn(\n                        \"Argument(s) {} which are declared in the hookspec \"\n                        \"can not be found in this hook call\".format(notincall),\n                        stacklevel=2,\n                    )\n                    break\n    \n            firstresult = self.spec.opts.get(\"firstresult\")\n        else:\n            firstresult = False\n    \n>       return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\pluggy\\_hooks.py:265: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pluggy._manager.PluginManager object at 0x00000263747A3990>, hook_name = 'attach_file', methods = [<HookImpl plugin_name='2626180312336', plugin=<allure_pytest.listener.AllureListener object at 0x00000263748B6D10>>]\nkwargs = {'attachment_type': <AttachmentType.PNG: ('image/png', 'png')>, 'extension': None, 'name': None, 'source': './screen-shots/screen.png'}, firstresult = False\n\n    def _hookexec(self, hook_name, methods, kwargs, firstresult):\n        # called from all hookcaller instances.\n        # enable_tracing will set its own wrapping function at self._inner_hookexec\n>       return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\pluggy\\_manager.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhook_name = 'attach_file', hook_impls = [<HookImpl plugin_name='2626180312336', plugin=<allure_pytest.listener.AllureListener object at 0x00000263748B6D10>>]\ncaller_kwargs = {'attachment_type': <AttachmentType.PNG: ('image/png', 'png')>, 'extension': None, 'name': None, 'source': './screen-shots/screen.png'}, firstresult = False\n\n    def _multicall(hook_name, hook_impls, caller_kwargs, firstresult):\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from _HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results = []\n        excinfo = None\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    f\"hook call must provide argument {argname!r}\"\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        try:\n                            gen = hook_impl.function(*args)\n                            next(gen)  # first yield\n                            teardowns.append(gen)\n                        except StopIteration:\n                            _raise_wrapfail(gen, \"did not yield\")\n                    else:\n                        res = hook_impl.function(*args)\n                        if res is not None:\n                            results.append(res)\n                            if firstresult:  # halt further impl calls\n                                break\n            except BaseException:\n                excinfo = sys.exc_info()\n        finally:\n            if firstresult:  # first result hooks return a single value\n                outcome = _Result(results[0] if results else None, excinfo)\n            else:\n                outcome = _Result(results, excinfo)\n    \n            # run all wrapper post-yield blocks\n            for gen in reversed(teardowns):\n                try:\n                    gen.send(outcome)\n                    _raise_wrapfail(gen, \"has second yield\")\n                except StopIteration:\n                    pass\n    \n>           return outcome.get_result()\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\pluggy\\_callers.py:60: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pluggy._result._Result object at 0x0000026376DE8690>\n\n    def get_result(self):\n        \"\"\"Get the result(s) for this hook call.\n    \n        If the hook was marked as a ``firstresult`` only a single value\n        will be returned otherwise a list of results.\n        \"\"\"\n        __tracebackhide__ = True\n        if self._excinfo is None:\n            return self._result\n        else:\n            ex = self._excinfo\n>           raise ex[1].with_traceback(ex[2])\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\pluggy\\_result.py:60: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhook_name = 'attach_file', hook_impls = [<HookImpl plugin_name='2626180312336', plugin=<allure_pytest.listener.AllureListener object at 0x00000263748B6D10>>]\ncaller_kwargs = {'attachment_type': <AttachmentType.PNG: ('image/png', 'png')>, 'extension': None, 'name': None, 'source': './screen-shots/screen.png'}, firstresult = False\n\n    def _multicall(hook_name, hook_impls, caller_kwargs, firstresult):\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from _HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results = []\n        excinfo = None\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    f\"hook call must provide argument {argname!r}\"\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        try:\n                            gen = hook_impl.function(*args)\n                            next(gen)  # first yield\n                            teardowns.append(gen)\n                        except StopIteration:\n                            _raise_wrapfail(gen, \"did not yield\")\n                    else:\n>                       res = hook_impl.function(*args)\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\pluggy\\_callers.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <allure_pytest.listener.AllureListener object at 0x00000263748B6D10>, source = './screen-shots/screen.png', name = None, attachment_type = <AttachmentType.PNG: ('image/png', 'png')>, extension = None\n\n    @allure_commons.hookimpl\n    def attach_file(self, source, name, attachment_type, extension):\n>       self.allure_logger.attach_file(uuid4(), source, name=name, attachment_type=attachment_type, extension=extension)\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\allure_pytest\\listener.py:233: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <allure_commons.reporter.AllureReporter object at 0x00000263748B6CD0>, uuid = 'ee5f81f3-bab4-4627-ba51-96f6a82c95f3', source = './screen-shots/screen.png', name = None\nattachment_type = <AttachmentType.PNG: ('image/png', 'png')>, extension = None, parent_uuid = None\n\n    def attach_file(self, uuid, source, name=None, attachment_type=None, extension=None, parent_uuid=None):\n        file_name = self._attach(uuid, name=name, attachment_type=attachment_type,\n                                 extension=extension, parent_uuid=parent_uuid)\n>       plugin_manager.hook.report_attached_file(source=source, file_name=file_name)\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\allure_commons\\reporter.py:160: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <_HookCaller 'report_attached_file'>, args = (), kwargs = {'file_name': 'ee5f81f3-bab4-4627-ba51-96f6a82c95f3-attachment.png', 'source': './screen-shots/screen.png'}, argname = 'file_name', firstresult = False\n\n    def __call__(self, *args, **kwargs):\n        if args:\n            raise TypeError(\"hook calling supports only keyword arguments\")\n        assert not self.is_historic()\n    \n        # This is written to avoid expensive operations when not needed.\n        if self.spec:\n            for argname in self.spec.argnames:\n                if argname not in kwargs:\n                    notincall = tuple(set(self.spec.argnames) - kwargs.keys())\n                    warnings.warn(\n                        \"Argument(s) {} which are declared in the hookspec \"\n                        \"can not be found in this hook call\".format(notincall),\n                        stacklevel=2,\n                    )\n                    break\n    \n            firstresult = self.spec.opts.get(\"firstresult\")\n        else:\n            firstresult = False\n    \n>       return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\pluggy\\_hooks.py:265: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pluggy._manager.PluginManager object at 0x00000263747A3990>, hook_name = 'report_attached_file'\nmethods = [<HookImpl plugin_name='2626180350672', plugin=<allure_commons.logger.AllureFileLogger object at 0x00000263748C02D0>>]\nkwargs = {'file_name': 'ee5f81f3-bab4-4627-ba51-96f6a82c95f3-attachment.png', 'source': './screen-shots/screen.png'}, firstresult = False\n\n    def _hookexec(self, hook_name, methods, kwargs, firstresult):\n        # called from all hookcaller instances.\n        # enable_tracing will set its own wrapping function at self._inner_hookexec\n>       return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\pluggy\\_manager.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhook_name = 'report_attached_file', hook_impls = [<HookImpl plugin_name='2626180350672', plugin=<allure_commons.logger.AllureFileLogger object at 0x00000263748C02D0>>]\ncaller_kwargs = {'file_name': 'ee5f81f3-bab4-4627-ba51-96f6a82c95f3-attachment.png', 'source': './screen-shots/screen.png'}, firstresult = False\n\n    def _multicall(hook_name, hook_impls, caller_kwargs, firstresult):\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from _HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results = []\n        excinfo = None\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    f\"hook call must provide argument {argname!r}\"\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        try:\n                            gen = hook_impl.function(*args)\n                            next(gen)  # first yield\n                            teardowns.append(gen)\n                        except StopIteration:\n                            _raise_wrapfail(gen, \"did not yield\")\n                    else:\n                        res = hook_impl.function(*args)\n                        if res is not None:\n                            results.append(res)\n                            if firstresult:  # halt further impl calls\n                                break\n            except BaseException:\n                excinfo = sys.exc_info()\n        finally:\n            if firstresult:  # first result hooks return a single value\n                outcome = _Result(results[0] if results else None, excinfo)\n            else:\n                outcome = _Result(results, excinfo)\n    \n            # run all wrapper post-yield blocks\n            for gen in reversed(teardowns):\n                try:\n                    gen.send(outcome)\n                    _raise_wrapfail(gen, \"has second yield\")\n                except StopIteration:\n                    pass\n    \n>           return outcome.get_result()\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\pluggy\\_callers.py:60: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pluggy._result._Result object at 0x0000026376DE8210>\n\n    def get_result(self):\n        \"\"\"Get the result(s) for this hook call.\n    \n        If the hook was marked as a ``firstresult`` only a single value\n        will be returned otherwise a list of results.\n        \"\"\"\n        __tracebackhide__ = True\n        if self._excinfo is None:\n            return self._result\n        else:\n            ex = self._excinfo\n>           raise ex[1].with_traceback(ex[2])\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\pluggy\\_result.py:60: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhook_name = 'report_attached_file', hook_impls = [<HookImpl plugin_name='2626180350672', plugin=<allure_commons.logger.AllureFileLogger object at 0x00000263748C02D0>>]\ncaller_kwargs = {'file_name': 'ee5f81f3-bab4-4627-ba51-96f6a82c95f3-attachment.png', 'source': './screen-shots/screen.png'}, firstresult = False\n\n    def _multicall(hook_name, hook_impls, caller_kwargs, firstresult):\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from _HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results = []\n        excinfo = None\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    f\"hook call must provide argument {argname!r}\"\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        try:\n                            gen = hook_impl.function(*args)\n                            next(gen)  # first yield\n                            teardowns.append(gen)\n                        except StopIteration:\n                            _raise_wrapfail(gen, \"did not yield\")\n                    else:\n>                       res = hook_impl.function(*args)\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\pluggy\\_callers.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <allure_commons.logger.AllureFileLogger object at 0x00000263748C02D0>, source = './screen-shots/screen.png', file_name = 'ee5f81f3-bab4-4627-ba51-96f6a82c95f3-attachment.png'\n\n    @hookimpl\n    def report_attached_file(self, source, file_name):\n        destination = os.path.join(self._report_dir, file_name)\n>       shutil.copy2(source, destination)\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\allure_commons\\logger.py:53: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nsrc = './screen-shots/screen.png', dst = 'C:\\\\Users\\\\Bar\\\\PycharmProjects\\\\Aut_Practice_Py\\\\Course_interview_questions\\\\ToDo App\\\\allure-results\\\\ee5f81f3-bab4-4627-ba51-96f6a82c95f3-attachment.png'\n\n    def copy2(src, dst, *, follow_symlinks=True):\n        \"\"\"Copy data and metadata. Return the file's destination.\n    \n        Metadata is copied with copystat(). Please see the copystat function\n        for more information.\n    \n        The destination may be a directory.\n    \n        If follow_symlinks is false, symlinks won't be followed. This\n        resembles GNU's \"cp -P src dst\".\n        \"\"\"\n        if os.path.isdir(dst):\n            dst = os.path.join(dst, os.path.basename(src))\n>       copyfile(src, dst, follow_symlinks=follow_symlinks)\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\shutil.py:436: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nsrc = './screen-shots/screen.png', dst = 'C:\\\\Users\\\\Bar\\\\PycharmProjects\\\\Aut_Practice_Py\\\\Course_interview_questions\\\\ToDo App\\\\allure-results\\\\ee5f81f3-bab4-4627-ba51-96f6a82c95f3-attachment.png'\n\n    def copyfile(src, dst, *, follow_symlinks=True):\n        \"\"\"Copy data from src to dst in the most efficient way possible.\n    \n        If follow_symlinks is not set and src is a symbolic link, a new\n        symlink will be created instead of copying the file it points to.\n    \n        \"\"\"\n        sys.audit(\"shutil.copyfile\", src, dst)\n    \n        if _samefile(src, dst):\n            raise SameFileError(\"{!r} and {!r} are the same file\".format(src, dst))\n    \n        file_size = 0\n        for i, fn in enumerate([src, dst]):\n            try:\n                st = _stat(fn)\n            except OSError:\n                # File most likely does not exist\n                pass\n            else:\n                # XXX What about other special files? (sockets, devices...)\n                if stat.S_ISFIFO(st.st_mode):\n                    fn = fn.path if isinstance(fn, os.DirEntry) else fn\n                    raise SpecialFileError(\"`%s` is a named pipe\" % fn)\n                if _WINDOWS and i == 0:\n                    file_size = st.st_size\n    \n        if not follow_symlinks and _islink(src):\n            os.symlink(os.readlink(src), dst)\n        else:\n>           with open(src, 'rb') as fsrc:\nE           FileNotFoundError: [Errno 2] No such file or directory: './screen-shots/screen.png'\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\shutil.py:256: FileNotFoundError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_todo_app_allure.TestToDoActionsApp object at 0x00000263748DF250>\n\n    @allure.title(\"TC 01 - Create assignment\")\n    @allure.description(\"Creating a new assignment\")\n    def test_tc01(self):\n        try:\n            self.step_add_assignment()\n            take_screenshot(driver)\n            self.step_check_task_exist()\n    \n        except Exception as error:\n            print(error)\n>           pytest.fail(\"View screen shot\")\n\ntest_todo_app_allure.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nreason = 'View screen shot', pytrace = True, msg = None\n\n    @_with_exception(Failed)\n    def fail(reason: str = \"\", pytrace: bool = True, msg: Optional[str] = None) -> NoReturn:\n        \"\"\"Explicitly fail an executing test with the given message.\n    \n        :param reason:\n            The message to show the user as reason for the failure.\n    \n        :param pytrace:\n            If False, msg represents the full failure information and no\n            python traceback will be reported.\n    \n        :param msg:\n            Same as ``reason``, but deprecated. Will be removed in a future version, use ``reason`` instead.\n        \"\"\"\n        __tracebackhide__ = True\n        reason = _resolve_msg_to_reason(\"fail\", reason, msg)\n>       raise Failed(msg=reason, pytrace=pytrace)\nE       Failed: View screen shot\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\_pytest\\outcomes.py:194: Failed\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_todo_app_allure.TestToDoActionsApp object at 0x00000263748DF250>\n\n    @allure.title(\"TC 01 - Create assignment\")\n    @allure.description(\"Creating a new assignment\")\n    def test_tc01(self):\n        try:\n            self.step_add_assignment()\n            take_screenshot(driver)\n            self.step_check_task_exist()\n    \n        except Exception as error:\n            print(error)\n            pytest.fail(\"View screen shot\")\n    \n        finally:\n>           take_screenshot(driver)\n\ntest_todo_app_allure.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nTakeScreenShot.py:7: in take_screenshot\n    allure.attach.file(image, attachment_type=allure.attachment_type.PNG)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\allure_commons\\_allure.py:203: in file\n    plugin_manager.hook.attach_file(source=source, name=name, attachment_type=attachment_type, extension=extension)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\pluggy\\_hooks.py:265: in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\pluggy\\_manager.py:80: in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\allure_pytest\\listener.py:233: in attach_file\n    self.allure_logger.attach_file(uuid4(), source, name=name, attachment_type=attachment_type, extension=extension)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\allure_commons\\reporter.py:160: in attach_file\n    plugin_manager.hook.report_attached_file(source=source, file_name=file_name)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\pluggy\\_hooks.py:265: in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\pluggy\\_manager.py:80: in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\allure_commons\\logger.py:53: in report_attached_file\n    shutil.copy2(source, destination)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\shutil.py:436: in copy2\n    copyfile(src, dst, follow_symlinks=follow_symlinks)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nsrc = './screen-shots/screen.png', dst = 'C:\\\\Users\\\\Bar\\\\PycharmProjects\\\\Aut_Practice_Py\\\\Course_interview_questions\\\\ToDo App\\\\allure-results\\\\12692604-fccd-474e-a1f9-538a70efa0db-attachment.png'\n\n    def copyfile(src, dst, *, follow_symlinks=True):\n        \"\"\"Copy data from src to dst in the most efficient way possible.\n    \n        If follow_symlinks is not set and src is a symbolic link, a new\n        symlink will be created instead of copying the file it points to.\n    \n        \"\"\"\n        sys.audit(\"shutil.copyfile\", src, dst)\n    \n        if _samefile(src, dst):\n            raise SameFileError(\"{!r} and {!r} are the same file\".format(src, dst))\n    \n        file_size = 0\n        for i, fn in enumerate([src, dst]):\n            try:\n                st = _stat(fn)\n            except OSError:\n                # File most likely does not exist\n                pass\n            else:\n                # XXX What about other special files? (sockets, devices...)\n                if stat.S_ISFIFO(st.st_mode):\n                    fn = fn.path if isinstance(fn, os.DirEntry) else fn\n                    raise SpecialFileError(\"`%s` is a named pipe\" % fn)\n                if _WINDOWS and i == 0:\n                    file_size = st.st_size\n    \n        if not follow_symlinks and _islink(src):\n            os.symlink(os.readlink(src), dst)\n        else:\n>           with open(src, 'rb') as fsrc:\nE           FileNotFoundError: [Errno 2] No such file or directory: './screen-shots/screen.png'\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\shutil.py:256: FileNotFoundError"}, "description": "Creating a new assignment", "steps": [{"name": "Create test task", "status": "passed", "start": 1672859171446, "stop": 1672859171919}], "attachments": [{"source": "ee5f81f3-bab4-4627-ba51-96f6a82c95f3-attachment.png", "type": "image/png"}, {"source": "12692604-fccd-474e-a1f9-538a70efa0db-attachment.png", "type": "image/png"}], "start": 1672859171446, "stop": 1672859172197, "uuid": "659f7ff6-f2bb-4d35-b351-cdc65bce8420", "historyId": "9feddc69413dc32f0fa61980caf71f4c", "testCaseId": "aab24f68d0a4ffaafdcb33577366a2c4", "fullName": "test_todo_app_allure.TestToDoActionsApp#test_tc01", "labels": [{"name": "suite", "value": "test_todo_app_allure"}, {"name": "subSuite", "value": "TestToDoActionsApp"}, {"name": "host", "value": "DESKTOP-E90KOTT"}, {"name": "thread", "value": "1328-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_todo_app_allure"}]}