{"name": "TC 01 - Change currency", "status": "failed", "statusDetails": {"message": "Failed", "trace": "self = <Woolovers.test_woolovers.TestWooLoversWeb object at 0x0000028C783CF010>\n\n    @allure.title(\"TC 01 - Change currency\")\n    @allure.description(\"Change the currency of the prices US Dollar\")\n    def test_change_currency(self):\n        try:\n            self.step_close_popups()\n>           self.step_change_currency()\n\ntest_woolovers.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\na = (<Woolovers.test_woolovers.TestWooLoversWeb object at 0x0000028C783CF010>,), kw = {}, __tracebackhide__ = True, params = OrderedDict()\nargs = ['<Woolovers.test_woolovers.TestWooLoversWeb object at 0x0000028C783CF010>']\n\n    @wraps(func)\n    def impl(*a, **kw):\n        __tracebackhide__ = True\n        params = func_parameters(func, *a, **kw)\n        args = list(map(lambda x: represent(x), a))\n        with StepContext(self.title.format(*args, **params), params):\n>           return func(*a, **kw)\n\n..\\..\\..\\..\\AppData\\Roaming\\Python\\Python311\\site-packages\\allure_commons\\_allure.py:192: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Woolovers.test_woolovers.TestWooLoversWeb object at 0x0000028C783CF010>\n\n    @allure.step(\"Change the currency to US Dollar\")\n    def step_change_currency(self):\n        #eyes.open(driver, \"Change currency\", \"Change currency on page to US Dollar\")\n        #eyes.check_window(\"Before changing the currency\")\n        driver.find_element(By.XPATH, \"//img[@src='//gepi.global-e.com/content/images/flags/il.png']\").click()\n        popup = driver.find_element(By.ID, \"globale_csc_popup\")\n>       driver.switch_to.frame(popup)\n\ntest_woolovers.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.switch_to.SwitchTo object at 0x0000028C7B5E56D0>\nframe_reference = <selenium.webdriver.remote.webelement.WebElement (session=\"b2a1546a3393067e66a00ffea56a0359\", element=\"36b5c429-40d7-4baf-a367-998f00a5eb64\")>\n\n    def frame(self, frame_reference) -> None:\n        \"\"\"\n        Switches focus to the specified frame, by index, name, or webelement.\n    \n        :Args:\n         - frame_reference: The name of the window to switch to, an integer representing the index,\n                            or a webelement that is an (i)frame to switch to.\n    \n        :Usage:\n            ::\n    \n                driver.switch_to.frame('frame_name')\n                driver.switch_to.frame(1)\n                driver.switch_to.frame(driver.find_elements(By.TAG_NAME, \"iframe\")[0])\n        \"\"\"\n        if isinstance(frame_reference, str):\n            try:\n                frame_reference = self._driver.find_element(By.ID, frame_reference)\n            except NoSuchElementException:\n                try:\n                    frame_reference = self._driver.find_element(By.NAME, frame_reference)\n                except NoSuchElementException:\n                    raise NoSuchFrameException(frame_reference)\n    \n>       self._driver.execute(Command.SWITCH_TO_FRAME, {\"id\": frame_reference})\n\n..\\..\\..\\..\\AppData\\Roaming\\Python\\Python311\\site-packages\\selenium\\webdriver\\remote\\switch_to.py:95: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"b2a1546a3393067e66a00ffea56a0359\")>, driver_command = 'switchToFrame'\nparams = {'id': {'element-6066-11e4-a52e-4f735466cecf': '36b5c429-40d7-4baf-a367-998f00a5eb64'}}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        params = self._wrap_value(params)\n    \n        if self.session_id:\n            if not params:\n                params = {\"sessionId\": self.session_id}\n            elif \"sessionId\" not in params:\n                params[\"sessionId\"] = self.session_id\n    \n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n..\\..\\..\\..\\AppData\\Roaming\\Python\\Python311\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:444: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000028C7B5E59D0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such frame\",\"message\":\"no such frame\\\\n  (Session info: chrome=109.0.5...dInitThunk [0x75A27D69+25]\\\\n\\\\tRtlInitializeExceptionChain [0x7707BB9B+107]\\\\n\\\\tRtlClearBits [0x7707BB1F+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = \"{}.{}\".format(frame[\"className\"], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchFrameException: Message: no such frame\nE         (Session info: chrome=109.0.5414.74)\nE       Stacktrace:\nE       Backtrace:\nE       \t(No symbol) [0x00FF6643]\nE       \t(No symbol) [0x00F8BE21]\nE       \t(No symbol) [0x00E8D960]\nE       \t(No symbol) [0x00E915DF]\nE       \t(No symbol) [0x00EF83D0]\nE       \t(No symbol) [0x00EDFD7C]\nE       \t(No symbol) [0x00EF6B09]\nE       \t(No symbol) [0x00EDFB76]\nE       \t(No symbol) [0x00EB49C1]\nE       \t(No symbol) [0x00EB5E5D]\nE       \tGetHandleVerifier [0x0126A142+2497106]\nE       \tGetHandleVerifier [0x012985D3+2686691]\nE       \tGetHandleVerifier [0x0129BB9C+2700460]\nE       \tGetHandleVerifier [0x010A3B10+635936]\nE       \t(No symbol) [0x00F94A1F]\nE       \t(No symbol) [0x00F9A418]\nE       \t(No symbol) [0x00F9A505]\nE       \t(No symbol) [0x00FA508B]\nE       \tBaseThreadInitThunk [0x75A27D69+25]\nE       \tRtlInitializeExceptionChain [0x7707BB9B+107]\nE       \tRtlClearBits [0x7707BB1F+191]\n\n..\\..\\..\\..\\AppData\\Roaming\\Python\\Python311\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:249: NoSuchFrameException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <Woolovers.test_woolovers.TestWooLoversWeb object at 0x0000028C783CF010>\n\n    @allure.title(\"TC 01 - Change currency\")\n    @allure.description(\"Change the currency of the prices US Dollar\")\n    def test_change_currency(self):\n        try:\n            self.step_close_popups()\n            self.step_change_currency()\n        except Exception as error:\n            print(error)\n>           pytest.fail()\nE           Failed\n\ntest_woolovers.py:42: Failed"}, "description": "Change the currency of the prices US Dollar", "steps": [{"name": "Approve and close 2 popups", "status": "passed", "start": 1673883785020, "stop": 1673883785703}, {"name": "Change the currency to US Dollar", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchFrameException: Message: no such frame\n  (Session info: chrome=109.0.5414.74)\nStacktrace:\nBacktrace:\n\t(No symbol) [0x00FF6643]\n\t(No symbol) [0x00F8BE21]\n\t(No symbol) [0x00E8D960]\n\t(No symbol) [0x00E915DF]\n\t(No symbol) [0x00EF83D0]\n\t(No symbol) [0x00EDFD7C]\n\t(No symbol) [0x00EF6B09]\n\t(No symbol) [0x00EDFB76]\n\t(No symbol) [0x00EB49C1]\n\t(No symbol) [0x00EB5E5D]\n\tGetHandleVerifier [0x0126A142+2497106]\n\tGetHandleVerifier [0x012985D3+2686691]\n\tGetHandleVerifier [0x0129BB9C+2700460]\n\tGetHandleVerifier [0x010A3B10+635936]\n\t(No symbol) [0x00F94A1F]\n\t(No symbol) [0x00F9A418]\n\t(No symbol) [0x00F9A505]\n\t(No symbol) [0x00FA508B]\n\tBaseThreadInitThunk [0x75A27D69+25]\n\tRtlInitializeExceptionChain [0x7707BB9B+107]\n\tRtlClearBits [0x7707BB1F+191]\n\n", "trace": "  File \"C:\\Users\\barka\\AppData\\Roaming\\Python\\Python311\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"C:\\Users\\barka\\PycharmProjects\\Aut_Practice_Py\\Course_interview_questions\\Woolovers\\test_woolovers.py\", line 57, in step_change_currency\n    driver.switch_to.frame(popup)\n  File \"C:\\Users\\barka\\AppData\\Roaming\\Python\\Python311\\site-packages\\selenium\\webdriver\\remote\\switch_to.py\", line 95, in frame\n    self._driver.execute(Command.SWITCH_TO_FRAME, {\"id\": frame_reference})\n  File \"C:\\Users\\barka\\AppData\\Roaming\\Python\\Python311\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 444, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\Users\\barka\\AppData\\Roaming\\Python\\Python311\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 249, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1673883785703, "stop": 1673883786226}], "attachments": [{"source": "16acaba8-bb5b-4ef4-a6bb-6298f81dd197-attachment.png", "type": "image/png"}], "start": 1673883785020, "stop": 1673883787051, "uuid": "e23e168b-37e7-4dc9-aadf-96accd2ed741", "historyId": "1723dfd6d4f8f4c1b567c2991be234f4", "testCaseId": "d42521bd866aa7800c02e105fb502744", "fullName": "test_woolovers.TestWooLoversWeb#test_change_currency", "labels": [{"name": "suite", "value": "test_woolovers"}, {"name": "subSuite", "value": "TestWooLoversWeb"}, {"name": "host", "value": "BarLaptop"}, {"name": "thread", "value": "5728-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_woolovers"}]}