{"name": "TC01 - Drag and drop", "status": "failed", "statusDetails": {"message": "Failed: Test failed, see attached screen shot", "trace": "self = <DemoQA.test_actions.TestActionsChains object at 0x00000200CF456D50>\n\n    @allure.title(\"TC01 - Drag and drop\")\n    @allure.description(\"This test a drag and drop in the app\")\n    def test_drag_and_drop(self):\n        try:\n            self.delete_ads()\n            self.step_go_to_dnd_app()\n            self.step_drag_and_drop()\n>           self.step_verify_dnd()\n\ntest_actions.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\na = (<DemoQA.test_actions.TestActionsChains object at 0x00000200CF456D50>,), kw = {}, __tracebackhide__ = True, params = OrderedDict()\nargs = ['<DemoQA.test_actions.TestActionsChains object at 0x00000200CF456D50>']\n\n    @wraps(func)\n    def impl(*a, **kw):\n        __tracebackhide__ = True\n        params = func_parameters(func, *a, **kw)\n        args = list(map(lambda x: represent(x), a))\n        with StepContext(self.title.format(*args, **params), params):\n>           return func(*a, **kw)\n\n..\\..\\..\\AppData\\Roaming\\Python\\Python311\\site-packages\\allure_commons\\_allure.py:192: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <DemoQA.test_actions.TestActionsChains object at 0x00000200CF456D50>\n\n    @allure.step(\"Step3-Verify document dropped\")\n    def step_verify_dnd(self):\n>       droppable = driver.find_element(By.XPATH, \"//div[@class='drop-box ui-droppable ui-state-highlight']/p\")\n\ntest_actions.py:58: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"9539e8010e1305959501857c7957ed80\")>, by = 'xpath', value = \"//div[@class='drop-box ui-droppable ui-state-highlight']/p\"\n\n    def find_element(self, by=By.ID, value: Optional[str] = None) -> WebElement:\n        \"\"\"\n        Find an element given a By strategy and locator.\n    \n        :Usage:\n            ::\n    \n                element = driver.find_element(By.ID, 'foo')\n    \n        :rtype: WebElement\n        \"\"\"\n        if isinstance(by, RelativeBy):\n            elements = self.find_elements(by=by, value=value)\n            if not elements:\n                raise NoSuchElementException(f\"Cannot locate relative element with: {by.root}\")\n            return elements[0]\n    \n        if by == By.ID:\n            by = By.CSS_SELECTOR\n            value = '[id=\"%s\"]' % value\n        elif by == By.CLASS_NAME:\n            by = By.CSS_SELECTOR\n            value = \".%s\" % value\n        elif by == By.NAME:\n            by = By.CSS_SELECTOR\n            value = '[name=\"%s\"]' % value\n    \n>       return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n\n..\\..\\..\\AppData\\Roaming\\Python\\Python311\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:861: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"9539e8010e1305959501857c7957ed80\")>, driver_command = 'findElement'\nparams = {'using': 'xpath', 'value': \"//div[@class='drop-box ui-droppable ui-state-highlight']/p\"}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        params = self._wrap_value(params)\n    \n        if self.session_id:\n            if not params:\n                params = {\"sessionId\": self.session_id}\n            elif \"sessionId\" not in params:\n                params[\"sessionId\"] = self.session_id\n    \n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n..\\..\\..\\AppData\\Roaming\\Python\\Python311\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:444: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000200CCEEB6D0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...dInitThunk [0x75B47D69+25]\\\\n\\\\tRtlInitializeExceptionChain [0x7737BB9B+107]\\\\n\\\\tRtlClearBits [0x7737BB1F+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = \"{}.{}\".format(frame[\"className\"], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//div[@class='drop-box ui-droppable ui-state-highlight']/p\"}\nE         (Session info: chrome=108.0.5359.125)\nE       Stacktrace:\nE       Backtrace:\nE       \t(No symbol) [0x00C6F243]\nE       \t(No symbol) [0x00BF7FD1]\nE       \t(No symbol) [0x00AED04D]\nE       \t(No symbol) [0x00B1C0B0]\nE       \t(No symbol) [0x00B1C22B]\nE       \t(No symbol) [0x00B4E612]\nE       \t(No symbol) [0x00B385D4]\nE       \t(No symbol) [0x00B4C9EB]\nE       \t(No symbol) [0x00B38386]\nE       \t(No symbol) [0x00B1163C]\nE       \t(No symbol) [0x00B1269D]\nE       \tGetHandleVerifier [0x00F09A22+2655074]\nE       \tGetHandleVerifier [0x00EFCA24+2601828]\nE       \tGetHandleVerifier [0x00D18C0A+619850]\nE       \tGetHandleVerifier [0x00D17830+614768]\nE       \t(No symbol) [0x00C005FC]\nE       \t(No symbol) [0x00C05968]\nE       \t(No symbol) [0x00C05A55]\nE       \t(No symbol) [0x00C1051B]\nE       \tBaseThreadInitThunk [0x75B47D69+25]\nE       \tRtlInitializeExceptionChain [0x7737BB9B+107]\nE       \tRtlClearBits [0x7737BB1F+191]\n\n..\\..\\..\\AppData\\Roaming\\Python\\Python311\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:249: NoSuchElementException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <DemoQA.test_actions.TestActionsChains object at 0x00000200CF456D50>\n\n    @allure.title(\"TC01 - Drag and drop\")\n    @allure.description(\"This test a drag and drop in the app\")\n    def test_drag_and_drop(self):\n        try:\n            self.delete_ads()\n            self.step_go_to_dnd_app()\n            self.step_drag_and_drop()\n            self.step_verify_dnd()\n            self.attach_file()\n        except:\n            self.attach_file()\n>           pytest.fail(\"Test failed, see attached screen shot\")\nE           Failed: Test failed, see attached screen shot\n\ntest_actions.py:40: Failed"}, "description": "This test a drag and drop in the app", "steps": [{"name": "Step1-Open drag and drop page", "status": "passed", "start": 1671976217529, "stop": 1671976217720}, {"name": "Step2-Drag and drop", "status": "passed", "start": 1671976217720, "stop": 1671976218395}, {"name": "Step3-Verify document dropped", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//div[@class='drop-box ui-droppable ui-state-highlight']/p\"}\n  (Session info: chrome=108.0.5359.125)\nStacktrace:\nBacktrace:\n\t(No symbol) [0x00C6F243]\n\t(No symbol) [0x00BF7FD1]\n\t(No symbol) [0x00AED04D]\n\t(No symbol) [0x00B1C0B0]\n\t(No symbol) [0x00B1C22B]\n\t(No symbol) [0x00B4E612]\n\t(No symbol) [0x00B385D4]\n\t(No symbol) [0x00B4C9EB]\n\t(No symbol) [0x00B38386]\n\t(No symbol) [0x00B1163C]\n\t(No symbol) [0x00B1269D]\n\tGetHandleVerifier [0x00F09A22+2655074]\n\tGetHandleVerifier [0x00EFCA24+2601828]\n\tGetHandleVerifier [0x00D18C0A+619850]\n\tGetHandleVerifier [0x00D17830+614768]\n\t(No symbol) [0x00C005FC]\n\t(No symbol) [0x00C05968]\n\t(No symbol) [0x00C05A55]\n\t(No symbol) [0x00C1051B]\n\tBaseThreadInitThunk [0x75B47D69+25]\n\tRtlInitializeExceptionChain [0x7737BB9B+107]\n\tRtlClearBits [0x7737BB1F+191]\n\n", "trace": "  File \"C:\\Users\\barka\\AppData\\Roaming\\Python\\Python311\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"C:\\Users\\barka\\PycharmProjects\\Aut_Practice_Py\\DemoQA\\test_actions.py\", line 58, in step_verify_dnd\n    droppable = driver.find_element(By.XPATH, \"//div[@class='drop-box ui-droppable ui-state-highlight']/p\")\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\barka\\AppData\\Roaming\\Python\\Python311\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 861, in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\barka\\AppData\\Roaming\\Python\\Python311\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 444, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\Users\\barka\\AppData\\Roaming\\Python\\Python311\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 249, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1671976218395, "stop": 1671976228463}], "attachments": [{"source": "8d656370-2e08-4b05-bb10-747820e2b1b2-attachment.png", "type": "image/png"}], "start": 1671976217501, "stop": 1671976228719, "uuid": "8d79c5b0-bfbf-4713-a2c4-da0faee9f78f", "historyId": "9e7f411652e9e927143ff5e1ee9bf14e", "testCaseId": "67b459d5cb7709c78230f66dcc7e3044", "fullName": "test_actions.TestActionsChains#test_drag_and_drop", "labels": [{"name": "suite", "value": "test_actions"}, {"name": "subSuite", "value": "TestActionsChains"}, {"name": "host", "value": "BarLaptop"}, {"name": "thread", "value": "5516-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_actions"}]}