{"name": "TC 02-B - Delete a task and check the task was deleted -Success", "status": "failed", "statusDetails": {"message": "Failed: View screen shot", "trace": "self = <test_todo_app_allure.TestToDoActionsApp object at 0x000001ED5C02EA10>\n\n    @allure.title(\"TC 02-B - Delete a task and check the task was deleted -Success\")\n    @allure.description(\"Create a new task and delete it\")\n    def test_tc03(self):\n        try:\n            self.step_add_task3()\n>           self.step_delete_task3()\n\ntest_todo_app_allure.py:99: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\na = (<test_todo_app_allure.TestToDoActionsApp object at 0x000001ED5C02EA10>,), kw = {}, __tracebackhide__ = True, params = OrderedDict()\nargs = ['<test_todo_app_allure.TestToDoActionsApp object at 0x000001ED5C02EA10>']\n\n    @wraps(func)\n    def impl(*a, **kw):\n        __tracebackhide__ = True\n        params = func_parameters(func, *a, **kw)\n        args = list(map(lambda x: represent(x), a))\n        with StepContext(self.title.format(*args, **params), params):\n>           return func(*a, **kw)\n\n..\\..\\..\\..\\AppData\\Roaming\\Python\\Python311\\site-packages\\allure_commons\\_allure.py:192: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <test_todo_app_allure.TestToDoActionsApp object at 0x000001ED5C02EA10>\n\n    @allure.step(\"Delete test3\")\n    def step_delete_task3(self):\n        action = ActionChains(driver)\n        task = driver.find_element(By.XPATH, \"//*[text()='test3']\")\n        action.move_to_element(task).perform()\n        x_button = driver.find_element(By.CSS_SELECTOR, \"button.destroy\")\n>       x_button.click()\n\ntest_todo_app_allure.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"28fe1267d4df4059bdf58972626d75a0\", element=\"58fff8c3-ef43-4c71-a4b6-0b5ca2a26084\")>\n\n    def click(self) -> None:\n        \"\"\"Clicks the element.\"\"\"\n>       self._execute(Command.CLICK_ELEMENT)\n\n..\\..\\..\\..\\AppData\\Roaming\\Python\\Python311\\site-packages\\selenium\\webdriver\\remote\\webelement.py:93: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"28fe1267d4df4059bdf58972626d75a0\", element=\"58fff8c3-ef43-4c71-a4b6-0b5ca2a26084\")>, command = 'clickElement'\nparams = {'id': '58fff8c3-ef43-4c71-a4b6-0b5ca2a26084'}\n\n    def _execute(self, command, params=None):\n        \"\"\"Executes a command against the underlying HTML element.\n    \n        Args:\n          command: The name of the command to _execute as a string.\n          params: A dictionary of named parameters to send with the command.\n    \n        Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if not params:\n            params = {}\n        params[\"id\"] = self._id\n>       return self._parent.execute(command, params)\n\n..\\..\\..\\..\\AppData\\Roaming\\Python\\Python311\\site-packages\\selenium\\webdriver\\remote\\webelement.py:410: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"28fe1267d4df4059bdf58972626d75a0\")>, driver_command = 'clickElement'\nparams = {'id': '58fff8c3-ef43-4c71-a4b6-0b5ca2a26084'}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        params = self._wrap_value(params)\n    \n        if self.session_id:\n            if not params:\n                params = {\"sessionId\": self.session_id}\n            elif \"sessionId\" not in params:\n                params[\"sessionId\"] = self.session_id\n    \n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n..\\..\\..\\..\\AppData\\Roaming\\Python\\Python311\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:444: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001ED59B801D0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...dInitThunk [0x76D67D69+25]\\\\n\\\\tRtlInitializeExceptionChain [0x77DDBB9B+107]\\\\n\\\\tRtlClearBits [0x77DDBB1F+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = \"{}.{}\".format(frame[\"className\"], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=108.0.5359.125)\nE       Stacktrace:\nE       Backtrace:\nE       \t(No symbol) [0x0106F243]\nE       \t(No symbol) [0x00FF7FD1]\nE       \t(No symbol) [0x00EECF10]\nE       \t(No symbol) [0x00F1D003]\nE       \t(No symbol) [0x00F132A6]\nE       \t(No symbol) [0x00F3858C]\nE       \t(No symbol) [0x00F12BFF]\nE       \t(No symbol) [0x00F38804]\nE       \t(No symbol) [0x00F4C9EB]\nE       \t(No symbol) [0x00F38386]\nE       \t(No symbol) [0x00F1163C]\nE       \t(No symbol) [0x00F1269D]\nE       \tGetHandleVerifier [0x01309A22+2655074]\nE       \tGetHandleVerifier [0x012FCA24+2601828]\nE       \tGetHandleVerifier [0x01118C0A+619850]\nE       \tGetHandleVerifier [0x01117830+614768]\nE       \t(No symbol) [0x010005FC]\nE       \t(No symbol) [0x01005968]\nE       \t(No symbol) [0x01005A55]\nE       \t(No symbol) [0x0101051B]\nE       \tBaseThreadInitThunk [0x76D67D69+25]\nE       \tRtlInitializeExceptionChain [0x77DDBB9B+107]\nE       \tRtlClearBits [0x77DDBB1F+191]\n\n..\\..\\..\\..\\AppData\\Roaming\\Python\\Python311\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:249: ElementNotInteractableException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_todo_app_allure.TestToDoActionsApp object at 0x000001ED5C02EA10>\n\n    @allure.title(\"TC 02-B - Delete a task and check the task was deleted -Success\")\n    @allure.description(\"Create a new task and delete it\")\n    def test_tc03(self):\n        try:\n            self.step_add_task3()\n            self.step_delete_task3()\n            self.step_check_task_delete()\n    \n        except Exception as error:\n            print(error)\n>           pytest.fail(\"View screen shot\")\nE           Failed: View screen shot\n\ntest_todo_app_allure.py:104: Failed"}, "description": "Create a new task and delete it", "steps": [{"name": "Create test3 task", "status": "passed", "start": 1673373855586, "stop": 1673373857621}, {"name": "Delete test3", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=108.0.5359.125)\nStacktrace:\nBacktrace:\n\t(No symbol) [0x0106F243]\n\t(No symbol) [0x00FF7FD1]\n\t(No symbol) [0x00EECF10]\n\t(No symbol) [0x00F1D003]\n\t(No symbol) [0x00F132A6]\n\t(No symbol) [0x00F3858C]\n\t(No symbol) [0x00F12BFF]\n\t(No symbol) [0x00F38804]\n\t(No symbol) [0x00F4C9EB]\n\t(No symbol) [0x00F38386]\n\t(No symbol) [0x00F1163C]\n\t(No symbol) [0x00F1269D]\n\tGetHandleVerifier [0x01309A22+2655074]\n\tGetHandleVerifier [0x012FCA24+2601828]\n\tGetHandleVerifier [0x01118C0A+619850]\n\tGetHandleVerifier [0x01117830+614768]\n\t(No symbol) [0x010005FC]\n\t(No symbol) [0x01005968]\n\t(No symbol) [0x01005A55]\n\t(No symbol) [0x0101051B]\n\tBaseThreadInitThunk [0x76D67D69+25]\n\tRtlInitializeExceptionChain [0x77DDBB9B+107]\n\tRtlClearBits [0x77DDBB1F+191]\n\n", "trace": "  File \"C:\\Users\\barka\\AppData\\Roaming\\Python\\Python311\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"C:\\Users\\barka\\PycharmProjects\\Aut_Practice_Py\\Course_interview_questions\\ToDo App\\test_todo_app_allure.py\", line 121, in step_delete_task3\n    x_button.click()\n  File \"C:\\Users\\barka\\AppData\\Roaming\\Python\\Python311\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 93, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"C:\\Users\\barka\\AppData\\Roaming\\Python\\Python311\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 410, in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\barka\\AppData\\Roaming\\Python\\Python311\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 444, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\Users\\barka\\AppData\\Roaming\\Python\\Python311\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 249, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1673373857621, "stop": 1673373860976}], "attachments": [{"source": "4145afba-142e-4028-9215-d6ae6d2edf3e-attachment.png", "type": "image/png"}], "start": 1673373855586, "stop": 1673373861130, "uuid": "2854c62c-5bf6-433c-a8d3-6395d2d8eea5", "historyId": "5fae9314f0483a2883632e657004ba3e", "testCaseId": "c10d7e136cca7e74a49bdc58d76c5937", "fullName": "test_todo_app_allure.TestToDoActionsApp#test_tc03", "labels": [{"name": "suite", "value": "test_todo_app_allure"}, {"name": "subSuite", "value": "TestToDoActionsApp"}, {"name": "host", "value": "BarLaptop"}, {"name": "thread", "value": "9412-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_todo_app_allure"}]}